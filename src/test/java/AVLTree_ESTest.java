/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 19:46:07 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-860));
      aVLTree0.insert(998);
      aVLTree0.delete((-860));
      aVLTree0.delete((-860));
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.insert((-2430));
      aVLTree0.insert((-3259));
      aVLTree0.getRoot();
      aVLTree0.find((-273));
      aVLTree0.insert((-273));
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.getRoot();
      aVLTree0.insert((-860));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(832);
      aVLTree0.insert(0);
      aVLTree0.delete((-36));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree_Node1.height = (-1);
      aVLTree0.getBalance(aVLTree_Node1);
      // Undeclared exception!
      aVLTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.delete((-1));
      aVLTree0.delete(2238);
      aVLTree0.insert(2238);
      aVLTree0.insert(0);
      aVLTree0.insert((-691));
      aVLTree0.find((-691));
      aVLTree0.find(0);
      aVLTree0.find(2238);
      aVLTree0.delete((-1));
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.delete(2238);
      aVLTree0.delete((-1060));
      aVLTree0.delete(2238);
      aVLTree0.delete((-967));
      aVLTree0.delete((-691));
      aVLTree0.find((-68));
      aVLTree0.find(1);
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-283);
      aVLTree0.insert((-275));
      aVLTree0.delete(1);
      aVLTree0.delete((-283));
      aVLTree0.delete((-283));
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = 0;
      aVLTree0.getBalance(aVLTree_Node0);
      int int1 = 2424;
      aVLTree0.delete(int1);
      int int2 = (-230);
      aVLTree0.find(int2);
      aVLTree0.getRoot();
      aVLTree0.insert(int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert((-1889));
      aVLTree0.insert((-1));
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(328);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert((-1493));
      aVLTree0.find((-1));
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.insert(0);
      int int1 = 1463;
      int int2 = 1864;
      aVLTree0.insert(1864);
      aVLTree0.insert(1463);
      aVLTree0.delete(1463);
      aVLTree0.delete((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-283);
      aVLTree0.insert((-275));
      aVLTree0.delete(1);
      aVLTree0.delete((-283));
      aVLTree0.delete((-283));
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = 0;
      aVLTree0.getBalance(aVLTree_Node0);
      int int1 = 2424;
      aVLTree0.delete(int1);
      aVLTree0.getRoot();
      aVLTree0.insert(int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1262);
      aVLTree0.insert(0);
      aVLTree0.delete((-36));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = 0;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert((-1));
      aVLTree0.getBalance(aVLTree_Node0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.height = (-1);
      aVLTree0.getBalance(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree aVLTree1 = new AVLTree();
      aVLTree1.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 876;
      int int1 = 3663;
      aVLTree0.insert(3663);
      int int2 = (-1);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.delete(3663);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(1);
      aVLTree0.insert((-1281));
      int int0 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-1672));
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1672));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find(0);
      aVLTree0.insert(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1));
      aVLTree0.getBalance(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(670);
      aVLTree0.find((-2393));
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      int int0 = 1;
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      int int1 = (-767);
      aVLTree0.insert((-767));
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1122));
      aVLTree0.find(1810);
      aVLTree0.delete(1810);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert(355);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(16);
      aVLTree0.height();
      aVLTree0.find(16);
      aVLTree0.find(641);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.delete((-51));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1977);
      aVLTree0.insert(1326);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-422));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-422));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.find(0);
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.insert(240);
      aVLTree0.insert(1518);
      aVLTree0.find(1);
      aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(266);
      aVLTree0.insert(0);
      aVLTree0.insert((-8));
      aVLTree0.insert(104);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1864);
      aVLTree0.insert(1460);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(1864);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-1686));
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(998);
      aVLTree0.delete(998);
      aVLTree0.delete(998);
      aVLTree0.insert(998);
      aVLTree0.insert((-3259));
      aVLTree0.getRoot();
      aVLTree0.delete((-890));
      aVLTree0.find((-890));
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert((-890));
      assertEquals(1, aVLTree0.height());
  }
}
